searchState.loadedDescShard("actix_rt", 0, "Tokio-based single-threaded async runtime for the Actix …\nAn Arbiter represents a thread that provides an …\nA handle for sending spawn and stop messages to an Arbiter.\nA Tokio-based runtime proxy.\nA manager for a per-thread distributed async runtime.\nRunner that keeps a System’s event loop alive until stop …\nGet handle to a the System’s initial Arbiter.\nRuns the provided future, blocking the current thread …\nRuns the provided future, blocking the current thread …\nReturn a handle to the current thread’s Arbiter’s …\nGet current running system.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn a handle to the this Arbiter’s message sender.\nNumeric system identifier.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if there is a System registered on the current …\nWait for Arbiter’s event loop to complete.\nTCP/UDP/Unix bindings (mostly Tokio re-exports).\nSpawn a new Arbiter thread and start its event loop.\nReturns a new runtime initialized with default …\nCreate a new system.\nPins a value on the stack.\nStarts event loop and will return once System is stopped.\nRuns the event loop until stopped, returning the exit code.\nRetrieves a reference to the underlying Actix runtime …\nAsynchronous signal handling (Tokio re-exports).\nSpawns a future on the current thread as a new task.\nSend a future to the Arbiter’s thread and spawn it.\nSend a future to the Arbiter’s thread and spawn it.\nOffload a future onto the single-threaded runtime.\nSend a function to the Arbiter’s thread and execute it.\nSend a function to the Arbiter’s thread and execute it.\nInstruct Arbiter to stop processing it’s event loop.\nStop Arbiter from continuing it’s event loop.\nStop the system (with code 0).\nStop the system with a given exit code.\nTask management (Tokio re-exports).\nUtilities for tracking time (Tokio re-exports).\nRetrieves a reference to the underlying Tokio runtime …\nTry to get current running arbiter handle.\nTry to get current running system.\nSpawn a new Arbiter using the Tokio Runtime returned from …\nCreate a new System using the Tokio Runtime returned from …\nReturns a <code>Ready</code> representing readiness for all operations.\nReturns the empty <code>Ready</code> set.\nReturns a <code>Ready</code> representing error readiness.\nReturns a <code>Ready</code> representing readable readiness.\nReturns a <code>Ready</code> representing read closed readiness.\nDescribes the readiness state of an I/O resources.\nA TCP socket server, listening for connections.\nA TCP socket that has not yet been converted to a <code>TcpStream</code>…\nA TCP stream between a local and a remote socket.\nA UDP socket.\nReturns a <code>Ready</code> representing writable readiness.\nReturns a <code>Ready</code> representing write closed readiness.\nAccepts a new incoming connection from this listener.\nReads or writes from the socket using a user-provided IO …\nReads or writes from the socket using a user-provided IO …\nCreates a new <code>TcpListener</code>, which will be bound to the …\nBinds the socket to the given address.\nThis function will create a new UDP socket and attempt to …\nGets the value of the <code>SO_BROADCAST</code> option for this socket.\nEstablishes a TCP connection with a peer at the specified …\nOpens a TCP connection to a remote host.\nConnects the UDP socket setting the default destination …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>RawSocket</code> to a <code>TcpStream</code>.\nCreates new <code>TcpListener</code> from a <code>std::net::TcpListener</code>.\nCreates new <code>TcpStream</code> from a <code>std::net::TcpStream</code>.\nCreates new <code>UdpSocket</code> from a previously bound …\nConverts a <code>std::net::TcpStream</code> into a <code>TcpSocket</code>. The …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSplits a <code>TcpStream</code> into a read half and a write half, …\nTurns a <code>tokio::net::TcpListener</code> into a …\nTurns a <code>tokio::net::TcpStream</code> into a <code>std::net::TcpStream</code>.\nTurns a <code>tokio::net::UdpSocket</code> into a <code>std::net::UdpSocket</code>.\nReturns true if <code>Ready</code> is the empty set.\nReturns <code>true</code> if the value includes error <code>readiness</code>.\nReturns <code>true</code> if the value includes read-closed <code>readiness</code>.\nReturns <code>true</code> if the value includes <code>readable</code>.\nReturns <code>true</code> if the value includes writable <code>readiness</code>.\nReturns <code>true</code> if the value includes write-closed <code>readiness</code>.\nExecutes an operation of the <code>IP_ADD_MEMBERSHIP</code> type.\nExecutes an operation of the <code>IPV6_ADD_MEMBERSHIP</code> type.\nGets the value of the <code>SO_KEEPALIVE</code> option on this socket.\nExecutes an operation of the <code>IP_DROP_MEMBERSHIP</code> type.\nExecutes an operation of the <code>IPV6_DROP_MEMBERSHIP</code> type.\nReads the linger duration for this socket by getting the …\nReads the linger duration for this socket by getting the …\nConverts the socket into a <code>TcpListener</code>.\nReturns the local address that this listener is bound to.\nGets the local address of this socket.\nReturns the local address that this stream is bound to.\nReturns the local address that this socket is bound to.\nGets the value of the <code>IP_MULTICAST_LOOP</code> option for this …\nGets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …\nGets the value of the <code>IP_MULTICAST_TTL</code> option for this …\nCreates a new socket configured for IPv4.\nCreates a new socket configured for IPv6.\nGets the value of the <code>TCP_NODELAY</code> option on this socket.\nGets the value of the <code>TCP_NODELAY</code> option on this socket.\nReceives data on the socket from the remote address to …\nReceives data from the socket, without removing it from …\nRetrieve the sender of the data at the head of the input …\nReturns the remote address that this stream is connected …\nReturns the socket address of the remote peer this socket …\nPolls to accept a new incoming connection to this listener.\nAttempts to receive data on the socket, without removing …\nReceives data from the socket, without removing it from …\nRetrieve the sender of the data at the head of the input …\nPolls for read readiness.\nAttempts to receive a single datagram message on the …\nAttempts to receive a single datagram on the socket.\nPolls for read/receive readiness.\nAttempts to send data on the socket to the remote address …\nPolls for write/send readiness.\nAttempts to send data on the socket to a given address.\nPolls for write readiness.\nWaits for the socket to become readable.\nWaits for the socket to become readable.\nWaits for any of the requested ready states.\nWaits for any of the requested ready states.\nReceives a single datagram message on the socket from the …\nReceives a single datagram message on the socket from the …\nReceives a single datagram message on the socket, …\nReturns the size of the TCP receive buffer for this socket.\nReceives a single datagram message on the socket. On …\nRetrieves the value set for <code>SO_REUSEADDR</code> on this socket.\nSends data on the socket to the remote address that the …\nReturns the size of the TCP send buffer for this socket.\nSends data on the socket to the given address. On success, …\nSets the value of the <code>SO_BROADCAST</code> option for this socket.\nSets value for the <code>SO_KEEPALIVE</code> option on this socket.\nSets the linger duration of this socket by setting the …\nSets the linger duration of this socket by setting the …\nSets the value of the <code>IP_MULTICAST_LOOP</code> option for this …\nSets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …\nSets the value of the <code>IP_MULTICAST_TTL</code> option for this …\nSets the value of the <code>TCP_NODELAY</code> option on this socket.\nSets the value of the <code>TCP_NODELAY</code> option on this socket.\nSets the size of the TCP receive buffer on this socket.\nAllows the socket to bind to an in-use address.\nSets the size of the TCP send buffer on this socket.\nSets the value for the <code>IP_TOS</code> option on this socket.\nSets the value for the <code>IP_TOS</code> option on this socket.\nSets the value for the <code>IP_TTL</code> option on this socket.\nSets the value for the <code>IP_TTL</code> option on this socket.\nSets the value for the <code>IP_TTL</code> option on this socket.\nSplits a <code>TcpStream</code> into a read half and a write half, …\nReturns the value of the <code>SO_ERROR</code> option.\nReturns the value of the <code>SO_ERROR</code> option.\nReturns the value of the <code>SO_ERROR</code> option.\nGets the value of the <code>IP_TOS</code> option for this socket.\nGets the value of the <code>IP_TOS</code> option for this socket.\nConsumes stream, returning the tokio I/O object.\nConsumes stream, returning the tokio I/O object.\nConsumes stream, returning the tokio I/O object.\nTries to read or write from the socket using a …\nTries to read or write from the socket using a …\nTries to receive data on the socket without removing it …\nTry to retrieve the sender of the data at the head of the …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to receive a single datagram message on the socket …\nTries to receive data from the stream into the provided …\nTries to receive a single datagram message on the socket. …\nTries to receive a single datagram message on the socket. …\nTries to send data on the socket to the remote address to …\nTries to send data on the socket to the given address, but …\nTry to write a buffer to the stream, returning how many …\nTries to write several buffers to the stream, returning …\nGets the value of the <code>IP_TTL</code> option for this socket.\nGets the value of the <code>IP_TTL</code> option for this socket.\nGets the value of the <code>IP_TTL</code> option for this socket.\nWaits for the socket to become writable.\nWaits for the socket to become writable.\nCompletes when a “ctrl-c” notification is sent to the …\nTask failed to execute to completion.\nAn owned permission to join on a task (await its …\nAbort the task associated with the handle.\nReturns a new <code>AbortHandle</code> that can be used to remotely …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the join error, returning the object with which …\nReturns true if the error was caused by the task being …\nChecks if the task associated with this <code>JoinHandle</code> has …\nReturns true if the error was caused by the task panicking.\nRuns the provided closure on a thread where blocking is …\nConsumes the join error, returning the object with which …\nYields execution back to the Tokio runtime.\nA measurement of a monotonically nondecreasing clock. …\nInterval returned by <code>interval</code> and <code>interval_at</code>.\nFuture returned by <code>sleep</code> and <code>sleep_until</code>.\nFuture returned by <code>timeout</code> and <code>timeout_at</code>.\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …\nReturns the amount of time elapsed from another instant to …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …\nReturns the instant at which the future will complete.\nReturns the amount of time elapsed from another instant to …\nReturns the amount of time elapsed since this instant was …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>tokio::time::Instant</code> from a <code>std::time::Instant</code>.\nGets a mutable reference to the underlying value in this …\nGets a reference to the underlying value in this timeout.\nCreates new <code>Interval</code> that yields with interval of <code>period</code>. …\nCreates new <code>Interval</code> that yields with interval of <code>period</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this timeout, returning the underlying value.\nConvert the value into a <code>std::time::Instant</code>.\nReturns <code>true</code> if <code>Sleep</code> has elapsed.\nReturns the <code>MissedTickBehavior</code> strategy currently being …\nReturns an instant corresponding to “now”.\nReturns the period of the interval.\nPolls for the next instant in the interval to be reached.\nResets the interval to complete one period after the …\nResets the <code>Sleep</code> instance to a new deadline.\nResets the interval after the specified <code>std::time::Duration</code>…\nResets the interval to a <code>crate::time::Instant</code> deadline.\nResets the interval immediately.\nReturns the amount of time elapsed from another instant to …\nSets the <code>MissedTickBehavior</code> strategy that should be used.\nWaits until <code>duration</code> has elapsed.\nWaits until <code>deadline</code> is reached.\nCompletes when the next instant in the interval has been …\nRequires a <code>Future</code> to complete before the specified …")